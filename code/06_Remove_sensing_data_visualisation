### Visualising remote sensing data ###
  # Remote sensing = we are collecting reflectance data (wavelengths of visible light is reflected)
  # Satellite has many sensors that gathers information on different wacelengths and then it's added all together


# Installing the appropriate packages and calling the necessary libraries

  #install.packages("devtools")
  library(devtools)

  # using the imageRy package (when things are easy)
  install_github("ducciorocchini/imageRy") # (from devtools) 
  library(imageRy)

  # Because having a mac is ... unique, this is necessary
    # dowload file from the link in the error message: https://api.github.com/repos/ducciorocchini/imageRy/tarball/HEAD
    # Call the package directly from where is is on the mac (probably in Downloads folder)
    install.packages("/Users/lea/Desktop/R/ducciorocchini-imageRy-a971c18.tar.gz",repos = NULL, type = "source")

    install.packages("dichromat")  
    install.packages("fields") 
    install.packages("ggplot2") 
    install.packages("viridis") 

    # Be proud :) 

  library(imageRy)
  library(terra)

# List the data 
  im.list()
  # within data list, we can find "sentinel.dolomites.b2.tif"
  # Data provided by the ESA (European Space Agency)
  # The band 2 (B2) data is blue (0.5um) --> see website below for other bands
  # https://custom-scripts.sentinel-hub.com/custom-scripts/sentinel-2/bands/

# Band 2 --> how much light is reflected by blue wavelengths
  b2 <- im.import("sentinel.dolomites.b2.tif")
  # Yellow on map is what reflects blue and the dark blue absorbs blue
  
  # We can change the colours of the palette
  cl <- colorRampPalette(c("black", "grey", "lightgrey")) (100)
  plot(b2, col=cl)
  # now white reflects blue and black absorbs blue wavelengths
  
# Band 3 -->  how much light is reflected by green wavelengths
  b3 <- im.import("sentinel.dolomites.b3.tif")
  plot(b3, col=cl)

# Band 4 -->  how much light is reflected by red wavelengths (large wavelength)
  b4 <- im.import("sentinel.dolomites.b4.tif")
  plot(b4, col=cl)

# Band 8 -->  how much light is reflected by near infrared wavelengths
  b8 <- im.import("sentinel.dolomites.b8.tif")
  plot(b8, col=cl)

# Theory : 
  # Incident radiant flux is the light arriving on an object (sunlight) (Energy)
  # Reflectant radiant flux is the light reflected by that object (energy)
  # Reflectance = ratio between reflected/incident radiant flux --> ranges from 0 to 1
  
  # since the top of the mountain is rock, it reflects ++ light 
  # therefore is saturating the area on the plot compared to the forest around
  # We will compare B2 B3 B4 and B8 as they have same resoltion (10m)
  
  # Infrared range is divided between near infrared NIR (close to red visible light),
  # middle infrared (self explanatory)
  # and the thermal infrared (NOT measuring TÂ° --> only reflectance)
  
# Plot all images together in a multifram
  par(mfrow = c(2,2))
  plot(b2, col=cl)
  plot(b3, col=cl)
  plot(b4, col=cl)
  plot(b8, col=cl)
  # Notice visible light is quite similar while NIR provides additional information

# Plot images one over the other (stack images)
  sentstack <- c(b2, b3, b4, b8)
  plot(sentstack, col = cl)

# Plotting one layer of sentstack
  dev.off()
  plot(sentstack[[1]], col = cl)
  
# Make a multiframe with different colour palette
  
  cl2 <- colorRampPalette(c("dodgerblue4", "deepskyblue1", "white")) (100)
  cl3 <- colorRampPalette(c("darkgreen", "chartreuse4", "greenyellow")) (100)
  cl4 <- colorRampPalette(c("darkred", "firebrick1", "pink")) (100)
  clNIR <- colorRampPalette(c("green", "blueviolet", "yellow")) (100)
  
  par(mfrow = c(2,2))
  plot(b2, col=cl2)
  plot(b3, col=cl3)
  plot(b4, col=cl4)
  plot(b8, col=clNIR)

# RGB Plotting (using function in imageRy package)
  # Combine all 3 visible light images in a RGB scheme (RGB --> red, green, blue)
  # 3 basic colours are mounted together and the overlap of colours make the other colours
  # This creates a natural colour image (what our eyes see)
  
  dev.off()
  im.plotRGB(sentstack, red= 3, green= 2, blue= 1)
  im.plotRGB(sentstack, r=3, g=2, b=1) # Can also be coded like this
  im.plotRGB(sentstack, 3, 2, 1) # Can also be coded like this
  
  im.plotRGB(sentstack, 4, 3, 2) # Wrong colour image 
  # Using the NIR makes us see information that our eyes can't see :) (very cool)
